<?php

/**
 * Model_User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Model_User extends Model_Base_User
{
    const NOT_FOUND = 1;
    const WRONG_PASSWORD = 2;
    const WRONG_PW = self::WRONG_PASSWORD;
    const UNAUTHORIZED = 3;

    /**
     * Perform user authentication against database using provided credentials
     * 
     * @param string $username
     * @param string $password
     * @throws Exception
     * @return Model_User $user
     */
    public static function authenticate($username, $password)
    {
        $user = Doctrine_Core::getTable('Model_User')->findOneByUsernameOrEmail($username, $username);
        if ($user) {
            if ($user->password == $user->password($password)) {
                $user->logins++;
                $user->save();
                return $user;
            }
            $user->failedLogins++;
            $user->save();
            throw new Exception(self::WRONG_PW);
        }
        throw new Exception(self::NOT_FOUND);
    }

    /**
     * Hashes the user password for secure storage or other use
     * 
     * @param string $cleartext
     * @return string $password
     */
    public function password($cleartext)
    {
        $config = Zend_Registry::get('config')->game->security->password;
        $password = hash($config->hashingAlgorithm, md5($this->username) . $config->salt . $this->salt . $cleartext, $config->binaryStorage);
        return $password;
    }

    protected function generateSalt()
    {
        $salt = md5(md5($this->username) . mt_rand() . uniqid('SALT', TRUE));
        $this->_set('salt', $salt);
        return $this;
    }

    public function setEmail($email)
    {
        $options = array();
        $validator = new Zend_Validate_EmailAddress($options);
        if ($validator->isValid($email)) {
            $this->_set('email', $email);
        } else {
                throw new Exception('USER_EMAIL_INVALID');
        }

        // Check for unique username
        $table = $this->getTable();
        if ($table->findOneByEmail($email)) {
            throw new Exception('USER_EMAIL_UNIQUE');
        }
    }

    public function setUsername($user)
    {
        if (!empty($this->username)) {
            // Prevent changing username
            throw new Exception('USER_CHANGE_USERNAME_DENIED');
        }

        // Check for unique username
        $table = $this->getTable();
        if ($table->findOneByUsername($user)) {
            throw new Exception('USER_USERNAME_UNIQUE');
        }

        $options = array(
            'encoding' => 'utf8',
            'min'      => 1,
            'max'      => 30
        );
        $validator = new Zend_Validate_StringLength($options);
        if ($validator->isValid($user)) {
            $this->_set('username', $user);
        } else {
            throw new Exception('USER_USERNAME_LENGTH');
        }
    }

    public function setClassId($class)
    {
        if (empty($class)) {
            throw new Exception('USER_CLASS_INVALID');
        }
        $this->link('Class', $class);
    }

    public function setPassword($password, $verify = '')
    {
        $config = Zend_Registry::get('config')->game->security->password;
        $options = array(
            'encoding' => 'utf8',
            'min'      => $config->minLength,
            'max'      => $config->maxLength
        );
        $validator = new Zend_Validate_StringLength($options);
        if ($validator->isValid($password)) {
            // Continue
        } else {
            throw new Exception('USER_PASSWORD_LENGTH');
        }

        // Check the password for a lower case letter if required
        if ($config->requireMinuscule) {
            if (preg_match('/[a-z]/', $password)) {
                // Continue
            } else {
                throw new Exception('USER_PASSWORD_MINUSCULE_REQUIRED');
            }
        }

        // Check the password for a upper case letter if required
        if ($config->requireMajuscule) {
            if (preg_match('/[A-Z]/', $password)) {
                // Continue
            } else {
                throw new Exception('USER_PASSWORD_MAJUSCULE_REQUIRED');
            }
        }

        // Check the password for a number if required
        if ($config->requireNumber) {
            if (preg_match('/[0-9]/', $password)) {
                // Continue
            } else {
                throw new Exception('USER_PASSWORD_NUMBER_REQUIRED');
            }
        }

        // Check the password for a special character if required
        if ($config->requireNonAlphanumeric) {
            if (preg_match('/^[0-9a-zA-Z]/', $password)) {
                // Continue
            } else {
                throw new Exception('USER_PASSWORD_CHARACTER_REQUIRED');
            }
        }

        // Check the passwords match
        if ($verify && $verify != $password) {
            throw new Exception('USER_PASSWORDS_MISMATCH');
        }

        // Regenerate salt for extra security
        $this->generateSalt();
        $this->_set('password', $this->password($password));
    }

    /**
     * Sends the activation email to user
     * 
     * This email will use the setting to send HTML or plaintext email, and
     * provides a way for the user to activate the account
     * 
     * @return void
     */
    public function dispatchRegistrationEmail()
    {
        $config = Zend_Registry::get('config');
        $mail = new Zend_Mail;
        $mail->setFrom($config->game->administrator->email, $config->game->administrator->name);
        $mail->addTo($this->email, $this->username);
        $mail->setSubject('Welcome! Please activate your account');
        $mail->setBodyText('This is a test.');
        $mail->send();
    }

    public function save(Doctrine_Connection $conn = NULL)
    {
        $this->_set('updated', date('Y-m-d H:i:s'));
        if (empty($this->id)) {
            $this->_set('created', $this->updated);
        } 
        
        return parent::save();
    }
}